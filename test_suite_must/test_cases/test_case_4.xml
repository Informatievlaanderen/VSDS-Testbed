<testcase id="ts1_tc4" xmlns="http://www.gitb.com/tdl/v1/" xmlns:gitb="http://www.gitb.com/core/v1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <metadata>
        <gitb:name>[TC4] tree:Relation MUST have one tree:node </gitb:name>
        <gitb:version>1.0</gitb:version>
        <gitb:description>Each tree:Relation has one tree:node object of the type tree:Node</gitb:description>
        <gitb:documentation import="docs/test_case_4.html"/>
    </metadata>
    <imports>
        <artifact type="binary" encoding="UTF-8" name="shapesTemplate">resources/shapes/testcase4.ttl</artifact>
    </imports>   
    <actors>
        <gitb:actor id="LDESServer" role="SUT"/>
        <gitb:actor id="DataProvider"/>
    </actors>
    <namespaces>
       <ns prefix="ns">http://www.w3.org/2005/sparql-results#</ns>
    </namespaces>    
    <steps stopOnError="false">
        <!-- Step 1: Data provider posts KBO dataset to the LDES Server. -->
        <call id="step1" path="scriptlets/ingestDataset.xml"/>
        <!-- Step 2: Fetch the processed data from the endpoint of the LDES Server (by location). -->
        <log>"Process crawling data..."</log>
        <process desc="crawl geo fragmented data" output="crawledDataGeo" handler="$DOMAIN{processingServiceAddress}" operation="crawl">
            <input name="viewURI">$SYSTEM{endpointByLocation}</input>
        </process>

         <!-- Step 3: In the crawled graph, each tree:Relation must have a tree:node -->    
         
        <log>"Execute SHACL validator to verify that each tree:Relation has a tree:node"</log>
        <assign to="parameters{targetNode}">$SYSTEM{endpointAccess}</assign>
        <process output="processedShapes" handler="TemplateProcessor">
            <input name="parameters">$parameters</input>
            <input name="template">$shapesTemplate</input>
            <input name="syntax">'freemarker'</input>
        </process>
        <!-- 
            Here we use the SHACL validator to trigger a validation of RDF content using SHACL shapes (that we generate from the
            template as explained above). The validator is configured to have a single supported validation type ("any" - assumed
            by default) that requires shapes to provided as part of the input. This is through the "externalRules" input that
            takes a list of maps, each map containing the "ruleSet" and "ruleSyntax". In this case we also request to "addInputToReport"
            and "addRulesToReport" so that the validation report includes the validated content and the shapes used.
        -->
        <!-- When assigning to a variable "shape1" using a named key "ruleSet" the engine creates automatically a map ("shape1") with a key ("ruleSet"). -->
        <assign to="shape1{ruleSet}">$processedShapes</assign>
        <assign to="shape1{ruleSyntax}">"application/turtle"</assign> 
        <assign to="shapesToUse" append="true">$shape1</assign>       
        <verify id="step3" desc=" Validate if each tree:Relation has a tree:node on the crawled geospatial fragmentation graph " handler="$DOMAIN{shaclValidatorServiceAddress}">
            <input name="contentToValidate">$crawledDataGeo</input>
            <input name="contentSyntax">"application/turtle"</input>
            <input name="addInputToReport">true()</input>
            <input name="addRulesToReport">true()</input>
            <input name="externalRules">$shapesToUse</input>
        </verify>

        <!-- You can use the "log" step as follows to add any kind of information in the test session log. You can also add to the log from test services. -->
        <log>"Execute SPARQL query to have all the object of tree node..."</log>
        <!-- 
            Use the processing service from test-services to run a SPARQL select query. Note that processing steps are by default hidden but if you want
            you can choose to display them by setting the "hidden" attribute to false.
        -->
        <process id="collectTreeNode" hidden="true" output="resultTreeNodeGeo" handler="$DOMAIN{processingServiceAddress}" operation="sparqlSelect" desc="Execute SPARQL query to have all the values of tree node...">
            <input name="content">$crawledDataGeo</input>
            <input name="contentType">"application/turtle"</input>
            <input name="query"><![CDATA[" PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                 PREFIX legal: <http://www.w3.org/ns/legal#> 
                 PREFIX tree: <https://w3id.org/tree#> 
                 select ?treenode where {
                       ?s tree:node ?treenode.
                       }"]]></input>
        </process>

        <log>"Execute SPARQL query to have objects of tree:node in a tree:Relation which are also typed as tree:Node..."</log>
        <!-- 
            Use the processing service from test-services to run a SPARQL select query. Note that processing steps are by default hidden but if you want
            you can choose to display them by setting the "hidden" attribute to false.
        -->
        <process id="collectTreeNodeIRI" hidden="true" output="resultTreeNodeIRIGeo" handler="$DOMAIN{processingServiceAddress}" operation="sparqlSelect" desc="Execute SPARQL query to have all IRI with a type is a treeNode...">
            <input name="content">$crawledDataGeo</input>
            <input name="contentType">"application/turtle"</input>
            <input name="query"><![CDATA[" PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                 PREFIX legal: <http://www.w3.org/ns/legal#> 
                 PREFIX tree: <https://w3id.org/tree#> 
                 select ?treenode where {
                       ?k tree:node ?treenode. 
                       ?s rdf:type tree:Node.
                       ?s rdf:subject ?treenode.                       
                       }"]]></input>
        </process>

        <!-- Validate if two SPAQL query outputs are logically same. -->
        <verify id="step4" desc=" Validate if tree:node of a tree:Relation is typed as tree:Node for geospatial fragementation" handler="$DOMAIN{validationServiceAddress}">
            <input name ="type">"RDF Comparison"</input>
            <input name="model1">$resultTreeNodeGeo</input>
            <input name="model2">$resultTreeNodeIRIGeo</input>
        </verify>


        <!-- Step 5: Fetch the processed data from the endpoint of the LDES Server (by Time). -->
        <log>"Process crawling data..."</log>
        <process desc="crawl time fragmented data" output="crawledDataTime" handler="$DOMAIN{processingServiceAddress}" operation="crawl">
            <input name="viewURI">$SYSTEM{endpointByTime}</input>
        </process>

         <!-- Step 7: In the crawled graph, each tree:Relation must have a tree:node -->    
         
        <log>"Execute SHACL validator to verify that each tree:Relation has a tree:node"</log>
                  
        <verify id="step6" desc=" Validate if each tree:Relation has a tree:node on the crawled time-based graph " handler="$DOMAIN{shaclValidatorServiceAddress}">
            <input name="contentToValidate">$crawledDataTime</input>
            <input name="contentSyntax">"application/turtle"</input>
            <input name="addInputToReport">true()</input>
            <input name="addRulesToReport">true()</input>
            <input name="externalRules">$shapesToUse</input>
        </verify>

        <!-- You can use the "log" step as follows to add any kind of information in the test session log. You can also add to the log from test services. -->
        <log>"Execute SPARQL query to have all the object of tree node..."</log>
        <!-- 
            Use the processing service from test-services to run a SPARQL select query. Note that processing steps are by default hidden but if you want
            you can choose to display them by setting the "hidden" attribute to false.
        -->
        <process id="collectTreeNode" hidden="true" output="resultTreeNodeTime" handler="$DOMAIN{processingServiceAddress}" operation="sparqlSelect" desc="Execute SPARQL query to have all the values of tree node...">
            <input name="content">$crawledDataTime</input>
            <input name="contentType">"application/turtle"</input>
            <input name="query"><![CDATA[" PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                 PREFIX legal: <http://www.w3.org/ns/legal#> 
                 PREFIX tree: <https://w3id.org/tree#> 
                 select ?treenode where {
                       ?s tree:node ?treenode.
                       }"]]></input>
        </process>

        <log>"Execute SPARQL query to have objects of tree:node in a tree:Relation which are also typed as tree:Node..."</log>
        <!-- 
            Use the processing service from test-services to run a SPARQL select query. Note that processing steps are by default hidden but if you want
            you can choose to display them by setting the "hidden" attribute to false.
        -->
        <process id="collectTreeNodeIRI" hidden="true" output="resultTreeNodeIRITime" handler="$DOMAIN{processingServiceAddress}" operation="sparqlSelect" desc="Execute SPARQL query to have all IRI with a type is a treeNode...">
            <input name="content">$crawledDataTime</input>
            <input name="contentType">"application/turtle"</input>
            <input name="query"><![CDATA[" PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                 PREFIX legal: <http://www.w3.org/ns/legal#> 
                 PREFIX tree: <https://w3id.org/tree#> 
                 select ?treenode where {
                       ?k tree:node ?treenode. 
                       ?s rdf:type tree:Node.
                       ?s rdf:subject ?treenode.                       
                       }"]]></input>
        </process>

        <!-- Validate if two SPAQL query outputs are logically same. -->
        <verify id="step7" desc=" Validate if tree:node of a tree:Relation is typed as tree:Node for Timespatial fragementation" handler="$DOMAIN{validationServiceAddress}">
            <input name ="type">"RDF Comparison"</input>
            <input name="model1">$resultTreeNodeTime</input>
            <input name="model2">$resultTreeNodeIRITime</input>
        </verify>



       <!-- Step 9: Fetch the processed data from the endpoint of the LDES Server (by String). -->
        <log>"Process crawling data..."</log>
        <process desc="crawl string fragmented data" output="crawledDataString" handler="$DOMAIN{processingServiceAddress}" operation="crawl">
            <input name="viewURI">$SYSTEM{endpointByName}</input>
        </process>

         <!-- Step 10: In the crawled graph, each tree:Relation must have a tree:node -->    
         
        <log>"Execute SHACL validator to verify that each tree:Relation has a tree:node"</log>
                  
        <verify id="step9" desc=" Validate if each tree:Relation has a tree:node on the crawled String-based graph " handler="$DOMAIN{shaclValidatorServiceAddress}">
            <input name="contentToValidate">$crawledDataString</input>
            <input name="contentSyntax">"application/turtle"</input>
            <input name="addInputToReport">true()</input>
            <input name="addRulesToReport">true()</input>
            <input name="externalRules">$shapesToUse</input>
        </verify>

        <!-- You can use the "log" step as follows to add any kind of information in the test session log. You can also add to the log from test services. -->
        <log>"Execute SPARQL query to have all the object of tree node..."</log>
        <!-- 
            Use the processing service from test-services to run a SPARQL select query. Note that processing steps are by default hidden but if you want
            you can choose to display them by setting the "hidden" attribute to false.
        -->
        <process id="collectTreeNode" hidden="true" output="resultTreeNodeString" handler="$DOMAIN{processingServiceAddress}" operation="sparqlSelect" desc="Execute SPARQL query to have all the values of tree node...">
            <input name="content">$crawledDataString</input>
            <input name="contentType">"application/turtle"</input>
            <input name="query"><![CDATA[" PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                 PREFIX legal: <http://www.w3.org/ns/legal#> 
                 PREFIX tree: <https://w3id.org/tree#> 
                 select ?treenode where {
                       ?s tree:node ?treenode.
                       }"]]></input>
        </process>

        <log>"Execute SPARQL query to have objects of tree:node in a tree:Relation which are also typed as tree:Node..."</log>
        <!-- 
            Use the processing service from test-services to run a SPARQL select query. Note that processing steps are by default hidden but if you want
            you can choose to display them by setting the "hidden" attribute to false.
        -->
        <process id="collectTreeNodeIRI" hidden="true" output="resultTreeNodeIRIString" handler="$DOMAIN{processingServiceAddress}" operation="sparqlSelect" desc="Execute SPARQL query to have all IRI with a type is a treeNode...">
            <input name="content">$crawledDataString</input>
            <input name="contentType">"application/turtle"</input>
            <input name="query"><![CDATA[" PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                 PREFIX legal: <http://www.w3.org/ns/legal#> 
                 PREFIX tree: <https://w3id.org/tree#> 
                 select ?treenode where {
                       ?k tree:node ?treenode. 
                       ?s rdf:type tree:Node.
                       ?s rdf:subject ?treenode.                       
                       }"]]></input>
        </process>

        <!-- Validate if two SPAQL query outputs are logically same. -->
        <verify id="step10" desc=" Validate if tree:node of a tree:Relation is typed as tree:Node for String fragementation" handler="$DOMAIN{validationServiceAddress}">
            <input name ="type">"RDF Comparison"</input>
            <input name="model1">$resultTreeNodeString</input>
            <input name="model2">$resultTreeNodeIRIString</input>
        </verify>




    </steps>
    <!-- Definition of final summary message. -->
    <output>
        <success>
            <default>"Test session completed successfully."</default>
        </success>
        <failure>
            <case>
                <cond>$STEP_STATUS{step1} = 'ERROR'</cond>
                <message>"An error occurred while posting the test dataset to your endpoint."</message>
            </case>
            <case>
                <cond>$STEP_STATUS{step2} = 'ERROR'</cond>
                <message>"An error occurred when fetching the data from your endpoint [Geospatial]."</message>
            </case>
            <case>
                <cond>$STEP_STATUS{step3} = 'ERROR'</cond>
                <message>"Not each tree:Relation has one tree:node [Geospatial]"</message>
            </case>
              <case>
                <cond>$STEP_STATUS{step4} = 'false'</cond>
                <message>"Not each object of tree:node is typed as tree:Node [Geospatial]"</message>
            </case>

                <case>
                <cond>$STEP_STATUS{step5} = 'ERROR'</cond>
                <message>"An error occurred when fetching the data from your endpoint. [Time-based]"</message>
            </case>
            <case>
                <cond>$STEP_STATUS{step6} = 'ERROR'</cond>
                <message>"Not each tree:Relation has one tree:node [Time-based]"</message>
            </case>
              <case>
                <cond>$STEP_STATUS{step7} = 'false'</cond>
                <message>"Not each object of tree:node is typed as tree:Node [Time-based]"</message>
            </case>

                <case>
                <cond>$STEP_STATUS{step8} = 'ERROR'</cond>
                <message>"An error occurred when fetching the data from your endpoint. [String-based]"</message>
            </case>
            <case>
                <cond>$STEP_STATUS{step9} = 'ERROR'</cond>
                <message>"Not each tree:Relation has one tree:node [String-based]"</message>
            </case>
              <case>
                <cond>$STEP_STATUS{step10} = 'false'</cond>
                <message>"Not each object of tree:node is typed as tree:Node [String-based]"</message>
            </case>

            
            <default>"Test session failed. Please check the failed step report and the test session log for details."</default>
        </failure>
    </output>
</testcase>